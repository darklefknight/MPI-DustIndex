import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime as dt
from datetime import timedelta
import os

from bokeh.models import ColumnDataSource, Range1d
from bokeh.io import show,curdoc
from bokeh.plotting import figure
from bokeh.layouts import gridplot
from bokeh.embed import components

def randomData():
    data = np.asarray(np.abs(np.random.normal(0.5,0.5,719)))
    start_time = dt(2017,1,1,0,0,0)
    time = []
    for i in range(len(data)):
        time.append(start_time + timedelta(seconds=120*(i+1)))
    time = np.asarray(time)
    return (time,data)

def saveGrid(grid):
    script, div = components(grid)
    script = script[35:]  # removes the <script> tag at the beginning
    script = script[:-9]  # removes the </script> tag at the end

    # Replace the elementid in the script:
    start_index = script.index("elementid") + 12

    end_index = start_index
    for c in script[start_index:]:
        if (c == ','):
            break
        else:
            end_index += 1
    end_index -= 1
    replace_me = script[start_index:end_index]
    script = script.replace(replace_me, 'AvailabilityPlotElementID')
    print(replace_me)

    # write everything out as .js file:
    with open("DustIndexPlot.js", "w") as f:
        f.write("/*This code is generated by a python Script.")
        f.write("\nScript name: " + os.path.basename(__file__))
        f.write("\nLast modification: " + dt.today().strftime("%x"))
        f.write("\nAuthor: Tobias Machnitzki (tobias.machnitzki@mpimet.mpg.de) */\n")
        f.write(script)
        f.close()


if __name__ == "__main__":
    time,data = randomData()

    mean = np.mean(data)
    factors = ["DustIndex"]

    levels ={0    :"Very Low",
             0.01 : "Low",
             0.02 : "Middle",
             0.03 : "High",
             0.5  : "Very High"}

    #TODO: Write the level on top of the Line
    source = ColumnDataSource(data=dict(time=time,
                                        data=data))

    x_range = Range1d(start=0, end=2)
    p1 = figure(title="Dust Index", responsive=True,x_range=x_range,y_range=factors)
    p1.segment(0, factors, mean, factors, line_width=2, line_color="black", )
    p1.circle(mean, factors, size=15, fill_color="orange", line_color="black", line_width=3, )
    # p1.line(x=time,y=data,source=source)
    grid = gridplot([[p1]], plot_width=1200)
    curdoc().add_root(grid)

    # show(grid)
    saveGrid(grid)

